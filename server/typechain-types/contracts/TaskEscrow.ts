/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace TaskEscrow {
  export type TaskStruct = {
    taskId: BigNumberish;
    requester: AddressLike;
    worker: AddressLike;
    paymentAmount: BigNumberish;
    status: BigNumberish;
    createdAt: BigNumberish;
    expiresAt: BigNumberish;
  };

  export type TaskStructOutput = [
    taskId: bigint,
    requester: string,
    worker: string,
    paymentAmount: bigint,
    status: bigint,
    createdAt: bigint,
    expiresAt: bigint
  ] & {
    taskId: bigint;
    requester: string;
    worker: string;
    paymentAmount: bigint;
    status: bigint;
    createdAt: bigint;
    expiresAt: bigint;
  };
}

export interface TaskEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BPS_DENOMINATOR"
      | "PLATFORM_FEE_BPS"
      | "approveSubmission"
      | "assignWorker"
      | "cUSD"
      | "cancelTask"
      | "claimExpiredTask"
      | "createTask"
      | "getContractBalance"
      | "getTask"
      | "isTaskExpired"
      | "owner"
      | "pause"
      | "paused"
      | "platformFeesAccumulated"
      | "rejectSubmission"
      | "renounceOwnership"
      | "taskCounter"
      | "taskExists"
      | "tasks"
      | "transferOwnership"
      | "unpause"
      | "withdrawPlatformFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DebugLog"
      | "OwnershipTransferred"
      | "Paused"
      | "PaymentReleased"
      | "PlatformFeesWithdrawn"
      | "TaskCancelled"
      | "TaskCreated"
      | "TaskExpired"
      | "Unpaused"
      | "WorkerAssigned"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BPS_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PLATFORM_FEE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveSubmission",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assignWorker",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "cUSD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimExpiredTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createTask",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTaskExpired",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFeesAccumulated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rejectSubmission",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "taskCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "taskExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tasks", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawPlatformFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BPS_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PLATFORM_FEE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignWorker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cUSD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimExpiredTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTaskExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFeesAccumulated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taskCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "taskExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tasks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPlatformFees",
    data: BytesLike
  ): Result;
}

export namespace DebugLogEvent {
  export type InputTuple = [
    action: string,
    sender: AddressLike,
    taskId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    action: string,
    sender: string,
    taskId: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    action: string;
    sender: string;
    taskId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentReleasedEvent {
  export type InputTuple = [
    taskId: BigNumberish,
    worker: AddressLike,
    workerAmount: BigNumberish,
    platformFee: BigNumberish
  ];
  export type OutputTuple = [
    taskId: bigint,
    worker: string,
    workerAmount: bigint,
    platformFee: bigint
  ];
  export interface OutputObject {
    taskId: bigint;
    worker: string;
    workerAmount: bigint;
    platformFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlatformFeesWithdrawnEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskCancelledEvent {
  export type InputTuple = [
    taskId: BigNumberish,
    requester: AddressLike,
    refunded: BigNumberish
  ];
  export type OutputTuple = [
    taskId: bigint,
    requester: string,
    refunded: bigint
  ];
  export interface OutputObject {
    taskId: bigint;
    requester: string;
    refunded: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskCreatedEvent {
  export type InputTuple = [
    taskId: BigNumberish,
    requester: AddressLike,
    payment: BigNumberish,
    expiresAt: BigNumberish
  ];
  export type OutputTuple = [
    taskId: bigint,
    requester: string,
    payment: bigint,
    expiresAt: bigint
  ];
  export interface OutputObject {
    taskId: bigint;
    requester: string;
    payment: bigint;
    expiresAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskExpiredEvent {
  export type InputTuple = [
    taskId: BigNumberish,
    requester: AddressLike,
    refunded: BigNumberish
  ];
  export type OutputTuple = [
    taskId: bigint,
    requester: string,
    refunded: bigint
  ];
  export interface OutputObject {
    taskId: bigint;
    requester: string;
    refunded: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WorkerAssignedEvent {
  export type InputTuple = [taskId: BigNumberish, worker: AddressLike];
  export type OutputTuple = [taskId: bigint, worker: string];
  export interface OutputObject {
    taskId: bigint;
    worker: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TaskEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): TaskEscrow;
  waitForDeployment(): Promise<this>;

  interface: TaskEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BPS_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  PLATFORM_FEE_BPS: TypedContractMethod<[], [bigint], "view">;

  approveSubmission: TypedContractMethod<
    [_taskId: BigNumberish],
    [void],
    "nonpayable"
  >;

  assignWorker: TypedContractMethod<
    [_taskId: BigNumberish, _worker: AddressLike],
    [void],
    "nonpayable"
  >;

  cUSD: TypedContractMethod<[], [string], "view">;

  cancelTask: TypedContractMethod<
    [_taskId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimExpiredTask: TypedContractMethod<
    [_taskId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createTask: TypedContractMethod<
    [_paymentAmount: BigNumberish, _durationInDays: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getTask: TypedContractMethod<
    [_taskId: BigNumberish],
    [TaskEscrow.TaskStructOutput],
    "view"
  >;

  isTaskExpired: TypedContractMethod<
    [_taskId: BigNumberish],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  platformFeesAccumulated: TypedContractMethod<[], [bigint], "view">;

  rejectSubmission: TypedContractMethod<
    [_taskId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  taskCounter: TypedContractMethod<[], [bigint], "view">;

  taskExists: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  tasks: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, bigint, bigint] & {
        taskId: bigint;
        requester: string;
        worker: string;
        paymentAmount: bigint;
        status: bigint;
        createdAt: bigint;
        expiresAt: bigint;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  withdrawPlatformFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BPS_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PLATFORM_FEE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "approveSubmission"
  ): TypedContractMethod<[_taskId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "assignWorker"
  ): TypedContractMethod<
    [_taskId: BigNumberish, _worker: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cUSD"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cancelTask"
  ): TypedContractMethod<[_taskId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimExpiredTask"
  ): TypedContractMethod<[_taskId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createTask"
  ): TypedContractMethod<
    [_paymentAmount: BigNumberish, _durationInDays: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTask"
  ): TypedContractMethod<
    [_taskId: BigNumberish],
    [TaskEscrow.TaskStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isTaskExpired"
  ): TypedContractMethod<[_taskId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "platformFeesAccumulated"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rejectSubmission"
  ): TypedContractMethod<[_taskId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "taskCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "taskExists"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "tasks"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, bigint, bigint] & {
        taskId: bigint;
        requester: string;
        worker: string;
        paymentAmount: bigint;
        status: bigint;
        createdAt: bigint;
        expiresAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawPlatformFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "DebugLog"
  ): TypedContractEvent<
    DebugLogEvent.InputTuple,
    DebugLogEvent.OutputTuple,
    DebugLogEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentReleased"
  ): TypedContractEvent<
    PaymentReleasedEvent.InputTuple,
    PaymentReleasedEvent.OutputTuple,
    PaymentReleasedEvent.OutputObject
  >;
  getEvent(
    key: "PlatformFeesWithdrawn"
  ): TypedContractEvent<
    PlatformFeesWithdrawnEvent.InputTuple,
    PlatformFeesWithdrawnEvent.OutputTuple,
    PlatformFeesWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "TaskCancelled"
  ): TypedContractEvent<
    TaskCancelledEvent.InputTuple,
    TaskCancelledEvent.OutputTuple,
    TaskCancelledEvent.OutputObject
  >;
  getEvent(
    key: "TaskCreated"
  ): TypedContractEvent<
    TaskCreatedEvent.InputTuple,
    TaskCreatedEvent.OutputTuple,
    TaskCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TaskExpired"
  ): TypedContractEvent<
    TaskExpiredEvent.InputTuple,
    TaskExpiredEvent.OutputTuple,
    TaskExpiredEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "WorkerAssigned"
  ): TypedContractEvent<
    WorkerAssignedEvent.InputTuple,
    WorkerAssignedEvent.OutputTuple,
    WorkerAssignedEvent.OutputObject
  >;

  filters: {
    "DebugLog(string,address,uint256,uint256)": TypedContractEvent<
      DebugLogEvent.InputTuple,
      DebugLogEvent.OutputTuple,
      DebugLogEvent.OutputObject
    >;
    DebugLog: TypedContractEvent<
      DebugLogEvent.InputTuple,
      DebugLogEvent.OutputTuple,
      DebugLogEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PaymentReleased(uint256,address,uint256,uint256)": TypedContractEvent<
      PaymentReleasedEvent.InputTuple,
      PaymentReleasedEvent.OutputTuple,
      PaymentReleasedEvent.OutputObject
    >;
    PaymentReleased: TypedContractEvent<
      PaymentReleasedEvent.InputTuple,
      PaymentReleasedEvent.OutputTuple,
      PaymentReleasedEvent.OutputObject
    >;

    "PlatformFeesWithdrawn(address,uint256)": TypedContractEvent<
      PlatformFeesWithdrawnEvent.InputTuple,
      PlatformFeesWithdrawnEvent.OutputTuple,
      PlatformFeesWithdrawnEvent.OutputObject
    >;
    PlatformFeesWithdrawn: TypedContractEvent<
      PlatformFeesWithdrawnEvent.InputTuple,
      PlatformFeesWithdrawnEvent.OutputTuple,
      PlatformFeesWithdrawnEvent.OutputObject
    >;

    "TaskCancelled(uint256,address,uint256)": TypedContractEvent<
      TaskCancelledEvent.InputTuple,
      TaskCancelledEvent.OutputTuple,
      TaskCancelledEvent.OutputObject
    >;
    TaskCancelled: TypedContractEvent<
      TaskCancelledEvent.InputTuple,
      TaskCancelledEvent.OutputTuple,
      TaskCancelledEvent.OutputObject
    >;

    "TaskCreated(uint256,address,uint256,uint256)": TypedContractEvent<
      TaskCreatedEvent.InputTuple,
      TaskCreatedEvent.OutputTuple,
      TaskCreatedEvent.OutputObject
    >;
    TaskCreated: TypedContractEvent<
      TaskCreatedEvent.InputTuple,
      TaskCreatedEvent.OutputTuple,
      TaskCreatedEvent.OutputObject
    >;

    "TaskExpired(uint256,address,uint256)": TypedContractEvent<
      TaskExpiredEvent.InputTuple,
      TaskExpiredEvent.OutputTuple,
      TaskExpiredEvent.OutputObject
    >;
    TaskExpired: TypedContractEvent<
      TaskExpiredEvent.InputTuple,
      TaskExpiredEvent.OutputTuple,
      TaskExpiredEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "WorkerAssigned(uint256,address)": TypedContractEvent<
      WorkerAssignedEvent.InputTuple,
      WorkerAssignedEvent.OutputTuple,
      WorkerAssignedEvent.OutputObject
    >;
    WorkerAssigned: TypedContractEvent<
      WorkerAssignedEvent.InputTuple,
      WorkerAssignedEvent.OutputTuple,
      WorkerAssignedEvent.OutputObject
    >;
  };
}
